// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------
// User & Auth
// --------------------
model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String
  role              UserRole
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  doctorProfile     DoctorProfile?
  patientProfile    PatientProfile?
  notifications     Notification[]
  messagesSent      Message[]        @relation("MessagesSent")
  messagesReceived  Message[]        @relation("MessagesReceived")
  files             File[]
}

enum UserRole {
  DOCTOR
  PATIENT
}

// --------------------
// Doctor & Patient Profiles
// --------------------
model DoctorProfile {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  firstName         String
  lastName          String
  photoId           Int?             // linked to File
  professionalBio   String?
  specialization    String
  yearsExperience   Int
  medicalLicense    String
  certifications    String?
  officeAddress     String?
  city              String?
  state             String?
  zipCode           String?
  phoneNumber       String?
  emergencyContact  String?
  availability      Json 
  avgReview         Float?           @default(0)

  user              User             @relation(fields: [userId], references: [id])
  appointments      Appointment[]
  reviews           Review[]
}

model PatientProfile {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  firstName         String
  lastName          String
  photoId           Int?
  phoneNumber       String?
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  medicalHistory    String?

  user              User             @relation(fields: [userId], references: [id])
  appointments      Appointment[]
  reviews           Review[]
  medicalRecords    MedicalRecord[]
}

// --------------------
// Appointments & Consultations
// --------------------
model Appointment {
  id                Int              @id @default(autoincrement())
  doctorId          Int
  patientId         Int
  date              DateTime
  status            AppointmentStatus
  type              ConsultationType
  reason            String?
  notes             String?
  recordingId       Int?             // linked to File
  createdAt         DateTime         @default(now())

  doctor            DoctorProfile    @relation(fields: [doctorId], references: [id])
  patient           PatientProfile   @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ConsultationType {
  TEXT
  VIDEO
}

// --------------------
// Messaging
// --------------------
model Message {
  id                Int              @id @default(autoincrement())
  senderId          Int
  receiverId        Int
  appointmentId     Int?
  content           String?
  type              MessageType
  fileId            Int?
  isRead            Boolean          @default(false)
  createdAt         DateTime         @default(now())

  sender            User             @relation("MessagesSent", fields: [senderId], references: [id])
  receiver          User             @relation("MessagesReceived", fields: [receiverId], references: [id])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
}

// --------------------
// Reviews
// --------------------
model Review {
  id                Int              @id @default(autoincrement())
  doctorId          Int
  patientId         Int
  rating            Int
  comment           String?
  createdAt         DateTime         @default(now())

  doctor            DoctorProfile    @relation(fields: [doctorId], references: [id])
  patient           PatientProfile   @relation(fields: [patientId], references: [id])
}

// --------------------
// Medical Records
// --------------------
model MedicalRecord {
  id                Int              @id @default(autoincrement())
  patientId         Int
  title             String
  description       String?
  fileId            Int?
  createdAt         DateTime         @default(now())

  patient           PatientProfile   @relation(fields: [patientId], references: [id])
}

// --------------------
// File Management
// --------------------
model File {
  id                Int              @id @default(autoincrement())
  ownerId           Int
  url               String
  fileType          FileType
  createdAt         DateTime         @default(now())

  owner             User             @relation(fields: [ownerId], references: [id])
}

enum FileType {
  PROFILE_PICTURE
  CONSULTATION_RECORDING
  MEDICAL_DOCUMENT
  CHAT_MEDIA
}

// --------------------
// Notifications
// --------------------
model Notification {
  id                Int              @id @default(autoincrement())
  userId            Int
  type              NotificationType
  content           String
  isRead            Boolean          @default(false)
  createdAt         DateTime         @default(now())

  user              User             @relation(fields: [userId], references: [id])
}

enum NotificationType {
  APPOINTMENT
  MESSAGE
  REVIEW
  SYSTEM
}
